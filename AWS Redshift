--- Terminate activities and drop db

SELECT *
FROM pg_stat_activity
WHERE
   pg_stat_activity.datname = 'dbname'
  
SELECT pg_terminate_backend( 1075031457 )  --1075031457




--- convert unix epoch to timestamp
,timestamp 'epoch' + cast(epoch_column AS bigint)/1000 * interval '1 second' AS epoch_to_timestamp


SHOW TIMEZONE

select 
t
,timestamp 						AS "timestamp"--> UTC+0
,CAST(timestamp AS timestamp) 	AS "timestamp_cast"
,CAST(timestamp AS timestamp) AT TIME ZONE 'UTC' AS "UTC"
,CAST(timestamp AS timestamp) AT TIME ZONE 'UTC' AT TIME ZONE 'Europe/Rome'	AS "Rome"
from #tag_stage_batch 
order by t desc

-- l'output di una colonna timezone dipende dalla timezone dell'utente di redshift. non viene memorizzato in tabella il dato "statico" con la timezione della sessione con cui è inserito il dato. 
-- https://docs.aws.amazon.com/redshift/latest/dg/r_timezone_config.html



i timestamp in tabella sono sempre salvati in UTC.

- <column> AT TIME ZONE 'Europe/Rome':
specifica che la colonna timestamp è nel determinato fuso orario, quindi viene portato in UTC (roma è UTC +2 quindi vedremo l'ora diminuita di 2 ore)

- CONVERT_TIMEZONE('Europe/Rome', <column>):
assumendo che la colonna è già in UTC, viene convertita nella timezone selezionata (roma è UTC +2 quindi vedremo l'ora aumentata di 2 ore)




What is the best way to assess tables that need to be vacuumed or analyzed?
This query returns tables where greater than 20% of rows are unsorted or statistics are 20% stale.

SELECT "database", "schema", "table", unsorted, stats_off
FROM svv_table_info
WHERE unsorted > 20
OR stats_off > 20

Running VACUUM or ANALYZE on these tables may improve performance by keeping rows sorted and providing the query planner with accurate information.



WITH query_sql AS (
  SELECT
    query,
    LISTAGG(text) WITHIN GROUP (ORDER BY sequence) AS sql
  FROM stl_querytext
  GROUP BY 1
)
SELECT
  q.query,
  userid,
  xid,
  pid,
  starttime,
  endtime,
  DATEDIFF(milliseconds, starttime, endtime)/1000.0 AS duration,
  TRIM(database) AS database,
  (CASE aborted WHEN 1 THEN TRUE ELSE FALSE END) AS aborted,
  sql
FROM
  stl_query q JOIN query_sql qs ON (q.query = qs.query)
WHERE
  q.query = ...
ORDER BY starttime;






-- Show running queries
    SELECT user_name, db_name, pid, query
    FROM stv_recents
    WHERE status = 'Running';


