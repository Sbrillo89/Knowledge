/*****************************************************************************************************************************************************/
/*
CET = UTC+1

CEST = UTC+2:
entra in vigore ogni anno a partire dall'1:00 UTC dell'ultima domenica di marzo e termina alle ore 1:00 UTC dell'ultima domenica di ottobre.
*/


DECLARE @Actual AS DATETIME = GETDATE()
DECLARE @CETtoPST AS INT = 510	-- CET 9 ore avanti PST  --= 600 -- CEST 10 ore avanti PST
DECLARE @CETtoEST AS INT = 360 -- CET 6 ore avanti EST  --= 420 -- CEST 7 ore avanti EST

DECLARE @CESTtoPST AS INT = 600	-- CEST 10 ore avanti PST
DECLARE @CESTtoEST AS INT = 420 -- CEST 7 ore avanti EST

SELECT 
	 CAST(@Actual AS time) AS Actual
	,CAST(SWITCHOFFSET(TODATETIMEOFFSET(@Actual,@CETtoPST),0) AS time) as PST
	,CAST(SWITCHOFFSET(TODATETIMEOFFSET(@Actual,@CETtoEST),0) AS time) as EST



/*********************************************************************************************
Author: 
CreatedOn: 2021-04-08
Description: 

Changelog:

Test Statements:
EXEC [rpt].[Merchandise_NR1_Detail_ReportData]  @Season ='0057',@SubSeason ='SALE',@Area='APAC|EMEA' ,@DateFrom='2021-04-01',@DateTo='2021-04-15'

*********************************************************************************************/

CREATE PROCEDURE [rpt].[Merchandise_NR1_Detail_ReportData] (
															 @Season nvarchar(max) --selezione singola			-- exec [rpt].[Merchandise_NR1_PAR_Season]
															,@SubSeason nvarchar(max) --selezione singola		-- exec [rpt].[Merchandise_NR1_PAR_SubSeason]
															,@Area nvarchar(max) --selezione multipla			-- exec [rpt].[Merchandise_NR1_PAR_Area]
															,@DateFrom date
															,@DateTo date
															,@StoreKey nvarchar(max)							-- exec [rpt].[Merchandise_NR1_PAR_store] @Country='ITALY|USA'
															,@DTypeOfPurch nvarchar(max)						-- exec [rpt].[Merchandise_NR1_PAR_DocumentType]
														)
WITH RECOMPILE
AS
BEGIN

--Controllo validità date
IF @DateFrom > @DateTo RAISERROR('WARNING! Parameter DateTo can''t precede DateFrom',16,1)

-----------------------------------------------------------------------------------------------------------------------
-- Step0.

---Parametri per Debug
--DECLARE @Season NVARCHAR(20)=N'0059'
--DECLARE @SubSeason NVARCHAR(20)=N'CO'
--DECLARE @Area NVARCHAR(200)=N'APAC|EMEA|USA'
--DECLARE @DateFrom DATE ='2021-01-01 00:00:00'
--DECLARE @DateTo DATE='2021-07-29 00:00:00'
--DECLARE @StoreKey NVARCHAR(MAX)=N'XXXXX|999999;'
--DECLARE @DTypeOfPurch NVARCHAR(MAX)=N'<N.A.>|<N.A.>'

--cancellazione tabelle temporanee per debug
	if OBJECT_ID('tempdb..#par_Store') is not null
	drop table #par_Store
	if OBJECT_ID('tempdb..#par_DType') is not null
	drop table #par_DType
	IF OBJECT_ID('tempdb..#tmp_ProductList') IS NOT NULL
	DROP TABLE #tmp_ProductList
	IF OBJECT_ID('tempdb..#tmp_Document') IS NOT NULL
	DROP TABLE #tmp_Document
	IF OBJECT_ID('tempdb..#tmp_Inventory') IS NOT NULL
	DROP TABLE #tmp_Inventory
	IF OBJECT_ID('tempdb..#tmp_CustomerOrder') IS NOT NULL
	DROP TABLE #tmp_CustomerOrder
	IF OBJECT_ID('tempdb..#tmp_join') IS NOT NULL
	DROP TABLE #tmp_join

-----------------------------------------------------------------------------------------------------------------------
-- Step1. Preparazione parametri

--Controllo validità date
IF @DateFrom > @DateTo RAISERROR('WARNING! Parameter DateTo can''t precede DateFrom',16,1)

--gestione fittizi
set @StoreKey = REPLACE(@StoreKey,'123','abc')
--Estrazione Lista Store
SELECT Parameter as StoreKey
INTO #par_Store
FROM dbo.fn_Split(@StoreKey,';')

--DocumentTypePfPurchase
SELECT Parameter
INTO #par_DType
FROM dbo.fn_Split(@DTypeOfPurch,'|')






/*********************************************************************************************
Author:
CreatedOn: 2021-07-29

Description:
	-Calcolo del TopParent a partire dalla SAP_CEWB
	-Aggiunto calcolo delle righe IsFiller=1 per il calcolo delle colonne numeriche dell'organization chart

Changelog:
	--2021-09-29 (MAM): gestione nella cte SourceChildHistorical delle versioni di produzione usando solo la versione 1 

Test command:
	-- exec [stg].[sp_Calculate_BOM]

*********************************************************************************************/

CREATE PROCEDURE [stg].[sp_Calculate_BOM]
AS
BEGIN
/* ****************************************************************************************************
SOURCE
**************************************************************************************************** */
DROP TABLE IF EXISTS #Source
;WITH SourceTopParent AS
(
	SELECT DISTINCT
		 CONCAT(p.WERKS,'-',CASE
							WHEN TRY_CAST(p.MATNR AS INT) IS NULL THEN p.MATNR
							ELSE CAST(CAST(p.MATNR AS INT) AS NVARCHAR(40))  END) AS Materiale
		 ,p.WERKS AS Plant
	FROM [stg].[SAP_ZPP_BOM_V] p
	LEFT OUTER JOIN [stg].[SAP_ZPP_BOM_V] c
		ON p.MATNR = c.IDNRK
		AND c.MATNR <> c.IDNRK -- Per prendere anche le BOM di un livello solo (TopParent = Materiale = Componente)
		AND p.WERKS = c.WERKS
	WHERE c.IDNRK IS NULL

	--MATNR --> Materiale
	--IDNRK --> Componente

	-- SELECT * FROM [stg].[SAP_ZPP_BOM_V] WHERE MATNR = IDNRK
	-- SELECT * FROM [stg].[SAP_ZPP_BOM_V] WHERE IDNRK = '30011196'
),
SourceChildHistorical AS
(
	SELECT		
		 RANK() OVER(PARTITION BY CONCAT(c.WERKS, '-', c.MATNR) ORDER BY c.STLAL) AS Ranking --teniamo la versione più recente delle componenti prendendo: la prima alternativa (DB_Alt) la versione di validità più recente (In_val)
		,CONCAT(c.WERKS,'-',CASE
							WHEN TRY_CAST(c.MATNR AS INT) IS NULL THEN c.MATNR
							ELSE CAST(CAST(c.MATNR AS INT) AS NVARCHAR(40))  END) as Parent
		,CONCAT(c.WERKS,'-',CASE
							WHEN TRY_CAST(c.IDNRK AS INT) IS NULL THEN c.IDNRK
							ELSE CAST(CAST(c.IDNRK AS INT) AS NVARCHAR(40))  END) as Materiale
		--,c.Nodo
		--,c.Contatore
		,c.WERKS as Plant
	FROM [stg].[SAP_ZPP_BOM_V] c
	INNER JOIN (	--filtro le BOM sulla prima versione di produzione presente nella MKAL
				SELECT 
					 WERKS	--vedo qual'è la versione di produzione (STLAL) da usare
					,MATNR
					,STLAL
				FROM (
					SELECT --vedo nella MKAL qual è il primo VERID in ordine alfanumerico
					 VERID
					,STLAL
					,WERKS
					,MATNR
					--,MKSP
					,ROW_NUMBER() OVER( PARTITION BY WERKS, MATNR ORDER BY VERID) AS RN
					FROM [stg].[SAP_MKAL]
					WHERE 
						CAST(BDATU AS DATE) > CAST(GETDATE() AS DATE) --A.Guarnieri/M.Malinverno: Non considerare le versioni con fine validità < today (MKAL-BDATU < today)
						AND MKSP = ''	--A.Guarnieri/M.Malinverno:	Non considerare le versioni con blocco (MKAL-MKSP <> blank)
					) a
					WHERE RN = 1
				) mk
				ON c.WERKS = mk.WERKS
				AND c.MATNR = mk.MATNR
				AND c.STLAL = mk.STLAL
		
	WHERE CONCAT(c.WERKS, '-', c.IDNRK) <> CONCAT(c.WERKS, '-', c.MATNR)
	AND c.IDNRK IS NOT NULL
	--AND c.DB_alt = '1'		--mam 20210929: filtriamo la versione 1
),
SourceChildCurrent AS
(
	SELECT * FROM SourceChildHistorical
	WHERE Ranking = 1
),
Source AS
(
	SELECT
		  Materiale as MaterialeID
		, NULL as Parent
		, Materiale AS Materiale
		--, 1 as Nodo
		--, 1 as Contatore
		, Plant
	FROM SourceTopParent
	UNION ALL
	SELECT
		  CONCAT(Parent, '-', Materiale) as MaterialeID
		, Parent
		, Materiale
		--, Nodo
		--, Contatore 
		, Plant
	FROM SourceChildCurrent
)
SELECT * INTO #Source FROM Source

--SELECT * FROM #Source

/* ****************************************************************************************************
SOURCE RICORSIVA
**************************************************************************************************** */
DROP TABLE IF EXISTS #SourceRecursive
;WITH SourceRecursive AS
(
	SELECT
		  Materiale as TopParent
		, CAST(NULL as nvarchar(101)) as ParentID
		, MaterialeID
		, Parent
		, Materiale
		--, Nodo
		--, Contatore
		, 0 as Livello 
		, Plant
		--, CAST(0 as bigint) as PreviousLevelRowNumber
		--, CAST(1 as bigint) as LevelRowNumber
	FROM #Source
	WHERE Parent IS NULL

	UNION ALL

	SELECT
		  SR.TopParent
		, CAST(SR.MaterialeID AS NVARCHAR(101)) as ParentID
		, S.MaterialeID
		, S.Parent
		, S.Materiale
		--, S.Nodo
		--, S.Contatore
		, SR.Livello + 1 as Livello
		, S.Plant
		--, SR.RowNumber as PreviousLevelRowNumber
		--, ROW_NUMBER() OVER (PARTITION BY Livello ORDER BY S.Parent, S.Materiale) as LevelRowNumber
	FROM #Source S
	INNER JOIN SourceRecursive SR
		ON S.Parent = SR.Materiale
)
SELECT DISTINCT * INTO #SourceRecursive FROM SourceRecursive
-- La DISTINCT qua serve. Vedi sotto (senza DISTINCT)
/*
SELECT TopParent, ParentID, MaterialeID FROM #SourceRecursive GROUP BY TopParent, ParentID, MaterialeID HAVING COUNT(*) > 1
ORDER BY TopParent, ParentID, MaterialeID

SELECT * FROM #SourceRecursive WHERE MaterialeID = '80000219-11000005' AND TopParent = '30002482'
SELECT * FROM #SourceRecursive WHERE MaterialeID = '80000218-80000219' AND TopParent = '30002482'
*/

--SELECT * FROM #SourceRecursive
--ORDER BY TopParent, ParentID, MaterialeID

/* ****************************************************************************************************
SOURCE RICORSIVA CON FILL DEI GAP E COUNTING SUL LIVELLO 
(non serve per l'output ma per mantenere i corretti legami)
**************************************************************************************************** */
DROP TABLE IF EXISTS #SourceMaxLivello

SELECT TopParent, MAX(Livello) as MaxLivello INTO #SourceMaxLivello
FROM #SourceRecursive
GROUP BY TopParent

--SELECT * FROM #SourceMaxLivello
--WHERE MaxLivello = 0

DROP TABLE IF EXISTS #SourceMap

SELECT 
	  *
	, CAST(0 as bit) as IsFiller
	, 0 as PreviousLevelRowNumber
	, 1 as LevelRowNumber 
INTO #SourceMap FROM #SourceRecursive 
WHERE Livello = 0

DECLARE @Livello int = 1,
		@MaxLivello int

SELECT @MaxLivello = MAX(Livello) FROM #SourceRecursive

WHILE @Livello <= @MaxLivello
BEGIN

	INSERT INTO #SourceMap
	SELECT DISTINCT
			ISNULL(SR.TopParent  , S.TopParent  )    as TopParent
		  , ISNULL(SR.ParentID   , S.MaterialeID)    as ParentID
		  , ISNULL(SR.MaterialeID, S.MaterialeID)    as MaterialeID
		  , ISNULL(SR.Parent	 , S.Materiale  )    as Parent	 
		  , ISNULL(SR.Materiale	 , S.Materiale  )    as Materiale
		  --, SR.Nodo
		  --, SR.Contatore
		  , ISNULL(SR.Livello	, S.Livello + 1 )    as Livello
		  , S.Plant
		  , CASE
				WHEN SR.Materiale IS NOT NULL
					THEN CAST(0 as bit)
				ELSE CAST(1 as bit)
			END as IsFiller
		  , S.LevelRowNumber as PreviousLevelRowNumber
		  , ROW_NUMBER() OVER(PARTITION BY ISNULL(SR.TopParent, S.TopParent), ISNULL(SR.Livello	, S.Livello + 1) ORDER BY S.LevelRowNumber, ISNULL(SR.ParentID, S.ParentID), ISNULL(SR.MaterialeID, S.MaterialeID)) as LevelRowNumber
	FROM 
		(
			SELECT S.* FROM #SourceMap S
			INNER JOIN #SourceMaxLivello SM
				ON S.TopParent = SM.TopParent
			WHERE S.Livello = @Livello - 1 -- Livello precedente (parent)
			AND S.Livello < SM.MaxLivello -- Escludi le BOM che hanno già raggiunto il max livello di profondità necessario
		) S
	LEFT OUTER JOIN #SourceRecursive SR
		ON S.TopParent = SR.TopParent
		AND S.MaterialeID = SR.ParentID
		AND S.IsFiller = 0 -- Escludo dalla JOIN i Filler del livello precedente (ne creerà di nuovi perché è comunque in LEFT ma eviterà di valutare i filler che "moltiplicano" i parent
		AND SR.Livello = @Livello -- Livello corrente

	SET @Livello = @Livello + 1

END

--SELECT * FROM #SourceMap
--ORDER BY TopParent, Livello, ParentID, MaterialeID

/* ****************************************************************************************************
RISULTATO FINALE
**************************************************************************************************** */
DROP TABLE IF EXISTS #Output
;WITH SourceWithRowNumber AS
(
	SELECT
		  TopParent
		, ParentID
		, MaterialeID
		, Parent
		, Materiale
		, Livello
		, IsFiller
		, PreviousLevelRowNumber
		, LevelRowNumber
		, ROW_NUMBER() OVER (PARTITION BY TopParent ORDER BY Livello, PreviousLevelRowNumber, LevelRowNumber) as RowNumber
		, Plant
	FROM #SourceMap
)
--SELECT * FROM SourceWithRowNumber
, Output AS
(
	SELECT F1.*, ISNULL(F2.RowNumber, 0) as ParentRowNumber
	FROM SourceWithRowNumber F1
	LEFT OUTER JOIN SourceWithRowNumber F2
		ON F1.TopParent = F2.TopParent
		AND F1.ParentID = F2.MaterialeID
		AND F1.Livello = F2.Livello + 1 -- Serve il confronto sul Livello
		AND F1.PreviousLevelRowNumber = F2.LevelRowNumber -- Serve il confronto sul RowNumber
)
SELECT * INTO #Output FROM Output

DROP INDEX IF EXISTS tmp_FinalResult ON #Output
CREATE CLUSTERED INDEX tmp_FinalResult ON #Output (TopParent, Livello, ParentID, MaterialeID) 

-- SELECT * FROM #Output

/* ****************************************************************************************************
CALCOLO LEAD TIME
**************************************************************************************************** */
DROP TABLE IF EXISTS #WOLT
SELECT
	 CAST(CONCAT(t.WERKS
			,'-',CASE
					WHEN TRY_CAST(r.PLNBEZ AS INT) = 0 THEN '<N.A.>'
					WHEN TRY_CAST(r.PLNBEZ AS INT) IS NULL THEN r.PLNBEZ
					ELSE CAST(CAST(r.PLNBEZ AS INT) AS NVARCHAR(40))  END) AS NVARCHAR(50))	 AS Materiale
	,AVG(CAST(DATEDIFF(dd ,CAST(CASE 
			WHEN r.GSTRI = '00000000' THEN NULL
			ELSE r.GSTRI END
			AS DATE) ,CAST(CASE 
			WHEN r.GLTRI = '00000000' THEN NULL
			ELSE r.GLTRI END
			AS DATE)) AS FLOAT))		AS [LeadTime]
INTO #WOLT
FROM [stg].[SAP_AFKO] r		--Dettaglio date e materiali
LEFT OUTER JOIN [stg].[SAP_AUFK] t	--Testate ordini di produzione
	ON r.AUFNR = t.AUFNR
GROUP BY CONCAT(t.WERKS
			,'-',CASE
					WHEN TRY_CAST(r.PLNBEZ AS INT) = 0 THEN '<N.A.>'
					WHEN TRY_CAST(r.PLNBEZ AS INT) IS NULL THEN r.PLNBEZ
					ELSE CAST(CAST(r.PLNBEZ AS INT) AS NVARCHAR(40))  END)

TRUNCATE TABLE [stg].[SQL_BOM]
INSERT INTO [stg].[SQL_BOM] ([TopParent], [ParentID], [MaterialeID], [Parent], [Materiale], [Livello], [IsFiller], [PreviousLevelRowNumber], [LevelRowNumber], [RowNumber], [Plant], [ParentRowNumber], [LeadTime])
SELECT 
	o.*
	,isnull(w.LeadTime,0) as LeadTime
FROM #Output o
left outer join #WOLT w
	on o.Materiale = w.Materiale
	
--DROP TABLE IF EXISTS STG.SQL_BOM
--SELECT * INTO STG.SQL_BOM FROM #Output


END

----------------------------------------------------------------------------------------------------------------------------------------
--ultima datetime di modifica in tabella sql

SELECT last_user_update
FROM   sys.dm_db_index_usage_stats us
       JOIN sys.tables t
         ON t.object_id = us.object_id
WHERE  database_id = db_id()
       AND t.object_id = object_id('dwh.DimProduct') 

--------------------------------------------------------------------
--Creazione date range

SELECT 
	  DataareaId as DataAreaCod
	, ItemId as ProductCod
	, CAST(InventDate as date) as StartInventDate
	, LEAD(DATEADD(dd, -1, CAST(InventDate as date)), 1, '99991231') OVER (PARTITION BY DataareaId, ItemId ORDER BY DataAreaId, ItemId, InventDate) as EndInventDate
	, CAST(AverageCost as money) as AverageCost
FROM [stg].[AX01_bi_inventvalueitem]

--------------------------------------------------------------------
--cambiare schema ad una tabella dbo -> cfg
ALTER SCHEMA cfg
TRANSFER [dbo].[SecurityRules]

--------------------------------------------------------------------
--creazione utenza su sql Azure

--Da lanciare su Master
CREATE LOGIN test 
WITH PASSWORD = 'Password'

--Da lanciare sul DB
CREATE USER testUser
FOR LOGIN test 
WITH DEFAULT_SCHEMA = dbo;

GRANT CONTROL ON "cfg"."FCST_Process" TO testUser
GRANT CONTROL ON "fcst"."Input_ProductLink" TO testUser
GRANT CONTROL ON "fcst"."Input_TimeSeries" TO testUser
GRANT CONTROL ON "fcst"."Output_TimeSeriesForecast" TO testUser

--La login funziona se nella connessione viene specificato il db a cui si connette.
--altrimenti di default la login si connette sul db Master



--------------------------------------------------------------------
--  Tronca tabelle per schema

create procedure [dbo].[Test_Tronca_Tabelle_per_Schema]
as

declare @query_count varchar(max)
declare @query_truncate varchar(max)

declare @tmp_table_name varchar(max)


declare cur cursor for
SELECT TABLE_CATALOG + '.' + TABLE_SCHEMA + '.' + TABLE_NAME as tabella
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_schema='ax'

Open cur     
 
Fetch Next From cur Into @tmp_table_name
 
While (@@FETCH_STATUS = 0)
begin
	set @query_truncate = 'truncate table ' + @tmp_table_name
	exec @query_truncate
 
	Fetch Next From cur Into @tmp_table_name
 
end 


Close cur
Deallocate cur
 
GO


--------------------------------------------------------------------
-- SP STORICIZZAZIONE TABELLA

CREATE Procedure [dbo].[spStoricizzaCRM] 
as 
BEGIN

DECLARE @Today DATE
DECLARE @FirstDayMonth int
DECLARE @LastSnapshot nvarchar(50)

Set @Today = getdate()

Set @FirstDayMonth = case when month(@Today) <> month(dateadd(d,-1,@Today)) then 1
					  else 0
					  end

Set @LastSnapshot = (select max([VersioneSnapshot]) from [dbo].[HistoryCRM])
--print (@LastSnapshot)
--print ( cast(year(@Today) as nvarchar(4)) + cast(month(@Today) as nvarchar(2)) )

IF(@FirstDayMonth = 1 and @LastSnapshot <> cast(year(@Today) as nvarchar(4)) + cast(month(@Today) as nvarchar(2))) --Se primo gg del mese e non esiste già lo snapshot --> lo creo
	BEGIN

		Insert Into [dbo].[HistoryCRM](
			[DataSnapshot]
			,[VersioneSnapshot]
			,[CustomerSid]
			,[Loyalty]
			,[Spending]
			,[SpendingEcommerce]
			,[SpendingStore]
		)
		Select
			@Today
			,cast(year(@Today) as nvarchar(4)) + cast(month(@Today) as nvarchar(2))
			,[Customer_SID]
			,[LOYALTY__C]
			,[SPENDING_FRM__C]
			,[SPENDING_E_COMMERCE_FRM__C]
			,[SPENDING_STORE_FRM__C]
		from [cfg].[CRMCustomerAttributes]
		--from [cfg].[MasterSlave]
		where [Customer_SID] <> ''

	END

ELSE		--> Se non è il primo del mese oppure esiste già lo snapshot, lo aggiorno.				
	BEGIN

		-- Allineo lo Snapshot del mese corrente
		MERGE [dbo].[HistoryCRM] as Target --tabella nello stage
		USING
			(
			Select
				@Today							as [DataSnapshot]
				,cast(year(@Today) as nvarchar(4)) + cast(month(@Today) as nvarchar(2)) as [VersioneSnapshot]
				,[Customer_SID]				as [CustomerSid]
				,[LOYALTY__C]					as [Loyalty]
				,[SPENDING_FRM__C]				as [Spending]
				,[SPENDING_E_COMMERCE_FRM__C]	as [SpendingEcommerce]
				,[SPENDING_STORE_FRM__C]		as [SpendingStore]
			--from [cfg].[MasterSlave]
			from [cfg].[CRMCustomerAttributes]
			where [Customer_SID] <> ''
			) as Source

			ON target.[VersioneSnapshot] = Source.[VersioneSnapshot]
			and target.[CustomerSid] = Source.[CustomerSid]
			
		WHEN MATCHED 
			AND target.[DataSnapshot]		<> source.[DataSnapshot]	
			or target.[Loyalty]				<> source.[Loyalty]
			or target.[Spending]			<> source.[Spending]
			or target.[SpendingEcommerce]	<> source.[SpendingEcommerce]
			or target.[SpendingStore]		<> source.[SpendingStore]
			THEN

		UPDATE SET
			target.[DataSnapshot]		= source.[DataSnapshot]	
			,target.[VersioneSnapshot]	= source.[VersioneSnapshot]
			,target.[CustomerSid]		= source.[CustomerSid]
			,target.[Loyalty]			= source.[Loyalty]
			,target.[Spending]			= source.[Spending]
			,target.[SpendingEcommerce]	= source.[SpendingEcommerce]
			,target.[SpendingStore]		= source.[SpendingStore]

		WHEN NOT MATCHED BY TARGET THEN
		INSERT (
				[DataSnapshot]
				,[VersioneSnapshot]
				,[CustomerSid]
				,[Loyalty]
				,[Spending]
				,[SpendingEcommerce]
				,[SpendingStore]
			)
		VALUES (
			source.[DataSnapshot]
			,source.[VersioneSnapshot]
			,source.[CustomerSid]
			,source.[Loyalty]
			,source.[Spending]
			,source.[SpendingEcommerce]
			,source.[SpendingStore]
		);
	END
END

------------------------------------------------------------------------------------------------------------
-- PARAMETRI PROCEDURA DATI TO SQL

CREATE Procedure [dbo].[Bdg_DataToExcel] @Bu as nvarchar(255)
,@Region as nvarchar(255)
,@Agent as nvarchar(255)
as
SET NOCOUNT ON
SET ANSI_WARNINGS OFF

EXEC msdb.dbo.sp_start_job N'Bdg_ToSQL_Currency'

------------------------------------------------------------------------------------------------------------
-- Compressione Tabelle

ALTER TABLE nav.PriceConfigurationES REBUILD PARTITION = ALL 

WITH (DATA_COMPRESSION = ROW); 

ALTER TABLE dbo.FactsInvCrMStage REBUILD PARTITION = ALL 

WITH (DATA_COMPRESSION = ROW);  

------------------------------------------------------------------------------------------------------------
-- SP per creazione folder dei report schedulati da ssrs:
/*
[dbo].[435_byStore_Scheduling] -> nella colonna Path contiene tutti i nomi delle directory da creare
esempio:
\\xxx.com\dfs\SH_Reports\PROD\102-654
\\xxx.com\dfs\SH_Reports\PROD\102-654
\\xxx.com\dfs\SH_Reports\PROD\102-760
\\xxx.com\dfs\SH_Reports\PROD\102-760
*/


CREATE procedure [dbo].[spGeneraFolder_435_byStore] 
as
begin
declare @path nvarchar(255)
declare cur cursor fast_forward
	for SELECT distinct 
		[PATH]   
	FROM [dbo].[435_byStore_Scheduling]
open cur
	 fetch next from cur into @path
	 while @@fetch_status = 0
	 begin
		EXEC master.dbo.xp_create_subdir @path
	 fetch next from cur into @path
	 end
close cur
deallocate cur
end

------------------------------------------------------------------------------------------------------------
-- 
Use SSISDB

Go

WITH 
ctePRE AS  (SELECT  * FROM catalog.event_messages em WHERE em.event_name IN ('OnPreExecute')), 
ctePOST AS (SELECT  * FROM catalog.event_messages em WHERE em.event_name IN ('OnPostExecute'))

SELECT  
b.operation_id
, b.package_name
, b.package_path
, b.message_source_name
, b.message_time as pre_message_time
, e.message_time as post_message_time
, DATEDIFF(SECOND, b.message_time, COALESCE (e.message_time, SYSDATETIMEOFFSET())) as elapsed_time_sec

INTO #t
FROM ctePRE b 
LEFT OUTER JOIN ctePOST e 
	ON b.operation_id = e.operation_id 
	AND b.package_name = e.package_name
	AND b.message_source_id = e.message_source_id

INNER JOIN [catalog].executions e2 
	ON b.operation_id = e2.execution_id

WHERE b.package_path <> '\Package' 
  AND cast(b.message_time AS date) = '2019-08-09' /* to get execution of a specific day. This line can be commented to get existing data till date */



SELECT
pkg.package_name
,pkg.package_path
--SUBSTRING(pkg.package_name, 1, LEN(pkg.package_name) - 5) PackageName
, pkg.message_source_name
, pkg.pre_message_time
, pkg.post_message_time
, pkg.elapsed_time_sec
FROM #t pkg
where package_name in( 
'1.2.1 - Carica_dati_Informix.dtsx'
--'1 - Carica_dati.dtsx'
)

ORDER BY elapsed_time_sec DESC

select 
a.operation_id 
,package_name
,message_source_name
,MIN( message_time  ) Task_Start
,MAX( message_time  ) Task_Finish
,DATEDIFF(MINUTE, MIN(message_time) , MAX(message_time)  ) [time_Take_Minutes]
,DATEDIFF(SECOND, MIN(message_time) , MAX(message_time)  ) [time_Take_Seconds]
from SSISDB.[catalog].[event_messages] a
inner JOIN SSISDB.[catalog].[operations] b
ON b.operation_id = a.operation_id

where 
	a.operation_id = '202140'
	and a.event_name in (
		'OnPreExecute',
		'OnPostExecute'
		)

 GROUP BY a.operation_id ,  package_name ,  message_source_name 
 ORDER BY 7 DESC


 select 
 RIGHT([Message],27)
 ,*
 ,DATEDIFF(MINUTE, start_time , end_time  ) [time_Take_Minutes]
  from SSISDB.[catalog].[event_messages] a
  inner JOIN SSISDB.[catalog].[operations] b
ON b.operation_id = a.operation_id
   where a.operation_id = '202140'
   and a.[message] like '%Elapsed time%'

   order by 1 desc


------------------------------------------------------------------------------------------------------------
-- 

		select distinct (OBJECT_NAME (id))
		from sys.syscomments
		where text like '%DIM_CALENDAR%'
		
------------------------------------------------------------------------------------------------------------
--  LOG
CREATE PROCEDURE [log].[p_Log_JobStepStart] (@JobId uniqueidentifier, @JobNumber smallint, @JobStepNumber smallint, @JobStepDescription varchar(255), @ProcedureName varchar(255) = NULL, @InputParameters XML, @JobStepId uniqueidentifier OUTPUT)
AS
BEGIN

	SET @JobStepId = newid()

	INSERT INTO [ETL].[Log].[Log] (JobNumber, JobId, JobStepNumber, JobStepId, JobName, JobDescription, JobStepDescription, ProcedureName, StartTime, InputParams)
	SELECT
		  @JobNumber
		, @JobId
		, @JobStepNumber
		, @JobStepId
		, J.JobName
		, J.JobDescription
		, @JobStepDescription
		, @ProcedureName
		, getdate()
		, @InputParameters
	FROM [Log].[Job] J
	WHERE J.JobNumber = @JobNumber
	OR (J.JobNumber = 0 AND @JobNumber IS NULL)
	END

CREATE PROCEDURE [log].[p_Log_JobStepSuccess] (@JobStepId uniqueidentifier)
AS
BEGIN

	UPDATE [ETL].[Log].[Log]
		SET EndTime = getdate(),
			Duration = abs(datediff(mi, StartTime, getdate())),
			Status = 'SUCCESS',
			ErrorNumber = 0,
			ErrorSeverity = 0,
			ErrorState = 0
	WHERE JobStepId = @JobStepId

END

CREATE PROCEDURE [log].[p_Log_JobStepFailure] (@JobStepId uniqueidentifier)
AS
BEGIN

	DECLARE @ErrorNumber int,
			@ErrorSeverity smallint,
			@ErrorState smallint,
			@ErrorProcedure varchar(255),
			@ErrorLine smallint,
			@ErrorMessage varchar(max)
			
    SELECT 
          @ErrorNumber = ERROR_NUMBER()
        , @ErrorSeverity = ERROR_SEVERITY()
        , @ErrorState = ERROR_STATE()
        , @ErrorProcedure = ERROR_PROCEDURE()
        , @ErrorLine = ERROR_LINE()
        , @ErrorMessage = ERROR_MESSAGE()

	UPDATE [ETL].[Log].[Log]
		SET EndTime = getdate(),
			Duration = abs(datediff(mi, StartTime, getdate())),
			Status = 'FAILED',
			ErrorNumber = @ErrorNumber,
			ErrorSeverity = @ErrorSeverity,
			ErrorState = @ErrorState,
			ErrorProcedure = @ErrorProcedure,
			ErrorLine = @ErrorLine,
			ErrorMessage = @ErrorMessage
	WHERE JobStepId = @JobStepId


	/* ******************************************************************************
	SEND MAIL
	****************************************************************************** */

	
--DICHIARAZIONE VARIABILI
	DECLARE	@JobId uniqueidentifier,
			@JobName varchar(100),
			@JobDescription varchar(100),
			@JobStepDescription varchar(100),
			@ProcedureName varchar(100),
			@StartTime datetime,
			@Duration int,
			@MailSubject nvarchar(255),
			@MailBody nvarchar(max)

--ASSEGNAZIONE VARIABILI
	SELECT
		  @JobId = JobId
		, @JobName = JobName
		, @JobDescription = JobDescription
		, @JobStepDescription = JobStepDescription
		, @ProcedureName = ProcedureName 
		, @StartTime = StartTime
		, @Duration = Duration
	FROM [ETL].[Log].[Log]
	WHERE JobStepId = @JobStepId

	SET @MailSubject =  'Consolidamento DWH - Errore nello step "' + ISNULL('"' +  @JobStepDescription + '" ', 'N.A.') + '" della procedura "' + @ProcedureName + '"'

	SET @MailBody = CONCAT(
		  'E'' fallito lo step ' + isnull('"' + @JobStepDescription + '" ', '') 
		, 'della procedura "' + @ProcedureName 
		, '".'
		, CHAR(13)
		, 'Lo step fallito è iniziato alle ' 
		, CAST(@StartTime as time(0)) 
		, ' del ' 
		, CONVERT(varchar(10), @StartTime, 105) 
		, '. La durata complessiva dello step fallito è di ' 
		, CAST(@Duration / 60 as varchar(4)) 
		, ' minuti.'
		, CHAR(13)
		, CHAR(13)
		, 'Dettagli errore'
		, CHAR(13)
		, '  - Error Number: ' 
		, ISNULL(CAST(@ErrorNumber as varchar(10)), 50000) 
		, CHAR(13)
		, '  - Error Message: ' 
		, ISNULL(CAST(LEFT(@ErrorMessage, 300) as varchar(300)), 'Not Available')
		, CHAR(13)
		, CHAR(13)
		)

--INVIO MAIL TRAMITE CLR		
	EXEC [dbo].[xp_SendMail]
			@smtpServer					= 'smtprelay.pippo.com',
			@smtpUser					= '', 
			@smtpPasswd					= '', 
			@recipients					= 'marco@pippo.it', 
			@recipientsCC				= '', 
			@recipientsBCC				= '', 
			@subject					= @MailSubject,
			@FROM						= 'etl@pippo.it', 
			@body						= @MailBody,
			@Attachment					= '', 
			@AttachmentFileExtension	= ''




	/* OLD versione Danilo
	DECLARE	@JobId uniqueidentifier,
			@JobName varchar(100),
			@JobDescription varchar(100),
			@JobStepDescription varchar(100),
			@ProcedureName varchar(100),
			@StartTime datetime,
			@Duration int,
			@MailSubject nvarchar(255),
			@MailBody nvarchar(max),
			@MailStmt nvarchar(max),
			@EMailProfile nvarchar(255),
			@ToList nvarchar(max),
			@CCList nvarchar(max),
			@BCCList nvarchar(max)

	SELECT
		  @JobId = JobId
		, @JobName = JobName
		, @JobDescription = JobDescription
		, @JobStepDescription = JobStepDescription
		, @ProcedureName = ProcedureName 
		, @StartTime = StartTime
		, @Duration = Duration
	FROM [ETL].[Log].[Log]
	WHERE JobStepId = @JobStepId

	SET @MailSubject =  'Consolidamento DWH - Errore nello step "' + ISNULL('"' +  @JobStepDescription + '" ', 'N.A.') + '" della procedura "' + @ProcedureName + '"'

	SET @MailBody = CONCAT(
		  'E'' fallito lo step ' + isnull('"' + @JobStepDescription + '" ', '') 
		, 'della procedura "' + @ProcedureName 
		, '".'
		, CHAR(13)
		, 'Lo step fallito è iniziato alle ' 
		, CAST(@StartTime as time(0)) 
		, ' del ' 
		, CONVERT(varchar(10), @StartTime, 105) 
		, '. La durata complessiva dello step fallito è di ' 
		, CAST(@Duration / 60 as varchar(4)) 
		, ' minuti.'
		, CHAR(13)
		, CHAR(13)
		, 'Dettagli errore'
		, CHAR(13)
		, '  - Error Number: ' 
		, ISNULL(CAST(@ErrorNumber as varchar(10)), 50000) 
		, CHAR(13)
		, '  - Error Message: ' 
		, ISNULL(CAST(LEFT(@ErrorMessage, 300) as varchar(300)), 'Not Available')
		, CHAR(13)
		, CHAR(13)
		, 'In allegato il file di Log relativo all''operazione fallita.'
		)

	SET @MailStmt = 
	'SET NOCOUNT ON
	GO
	SELECT * FROM [dbo].[fn_Get_JobStepLog](''' + CAST(@JobStepId as varchar(36)) + ''')'
	
	SELECT TOP 1 @EMailProfile = ParameterValue FROM [ETL].[Log].Parameter
	WHERE ParameterType = 'EMAIL_PROFILE'

	SELECT @ToList = STRING_AGG(ParameterValue, ';') FROM [ETL].[Log].Parameter
	WHERE ParameterType = 'EMAIL_TO'
	
	SELECT @CCList = STRING_AGG(ParameterValue, ';') FROM [ETL].[Log].Parameter
	WHERE ParameterType = 'EMAIL_CC'
	
	SELECT @BCCList = STRING_AGG(ParameterValue, ';') FROM [ETL].[Log].Parameter
	WHERE ParameterType = 'EMAIL_BCC'

	EXEC msdb..sp_send_dbmail
		  @profile_name = @EMailProfile
		, @recipients = @ToList
		, @copy_recipients = @CCList
		, @blind_copy_recipients = @BCCList
		, @subject = @MailSubject
		, @body = @MailBody
		, @body_format = 'TEXT'
		, @importance = 'high'
--		, @sensitivity = 'sensitivity'
--		, @file_attachments = 'attachment [ ; ...n ]'
		, @query = @MailStmt
		, @execute_query_database = 'DWH'
		, @attach_query_result_as_file = 1
		, @query_attachment_filename = 'LOG.txt'
		, @query_result_no_padding = 1
		, @query_result_header = 1
		, @query_result_separator = ';'
		, @exclude_query_output = 0
		*/
END
	
----------------------------------------------------------------------------------------------------------------------------
--- check se due tabelle sono identiche

SELECT * FROM tab1
UNION 
SELECT * FROM tab2
EXCEPT 
SELECT * FROM tab1
INTERSECT
SELECT * FROM tab2;


SELECT *
FROM
(SELECT * FROM tab1
UNION ALL  
SELECT * FROM tab2) data
GROUP BY col1,col2,...
HAVING count(*)!=2
	
	
	
	
	
