
--------------------------------------------------------------------
--ultima datetime di modifica in tabella sql

SELECT last_user_update
FROM   sys.dm_db_index_usage_stats us
       JOIN sys.tables t
         ON t.object_id = us.object_id
WHERE  database_id = db_id()
       AND t.object_id = object_id('dwh.DimProduct') 

--------------------------------------------------------------------
--Creazione date range

SELECT 
	  DataareaId as DataAreaCod
	, ItemId as ProductCod
	, CAST(InventDate as date) as StartInventDate
	, LEAD(DATEADD(dd, -1, CAST(InventDate as date)), 1, '99991231') OVER (PARTITION BY DataareaId, ItemId ORDER BY DataAreaId, ItemId, InventDate) as EndInventDate
	, CAST(AverageCost as money) as AverageCost
FROM [stg].[AX01_bi_inventvalueitem]

--------------------------------------------------------------------
--cambiare schema ad una tabella dbo -> cfg
ALTER SCHEMA cfg
TRANSFER [dbo].[SecurityRules]

--------------------------------------------------------------------
--creazione utenza su sql Azure

--Da lanciare su Master
CREATE LOGIN test 
WITH PASSWORD = 'Password'

--Da lanciare sul DB
CREATE USER testUser
FOR LOGIN test 
WITH DEFAULT_SCHEMA = dbo;

GRANT CONTROL ON "cfg"."FCST_Process" TO testUser
GRANT CONTROL ON "fcst"."Input_ProductLink" TO testUser
GRANT CONTROL ON "fcst"."Input_TimeSeries" TO testUser
GRANT CONTROL ON "fcst"."Output_TimeSeriesForecast" TO testUser

--La login funziona se nella connessione viene specificato il db a cui si connette.
--altrimenti di default la login si connette sul db Master



--------------------------------------------------------------------
--  Tronca tabelle per schema

create procedure [dbo].[Test_Tronca_Tabelle_per_Schema]
as

declare @query_count varchar(max)
declare @query_truncate varchar(max)

declare @tmp_table_name varchar(max)


declare cur cursor for
SELECT TABLE_CATALOG + '.' + TABLE_SCHEMA + '.' + TABLE_NAME as tabella
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_TYPE = 'BASE TABLE' AND TABLE_schema='ax'

Open cur     
 
Fetch Next From cur Into @tmp_table_name
 
While (@@FETCH_STATUS = 0)
begin
	set @query_truncate = 'truncate table ' + @tmp_table_name
	exec @query_truncate
 
	Fetch Next From cur Into @tmp_table_name
 
end 


Close cur
Deallocate cur
 
GO


--------------------------------------------------------------------
-- SP STORICIZZAZIONE TABELLA

CREATE Procedure [dbo].[spStoricizzaCRM] 
as 
BEGIN

DECLARE @Today DATE
DECLARE @FirstDayMonth int
DECLARE @LastSnapshot nvarchar(50)

Set @Today = getdate()

Set @FirstDayMonth = case when month(@Today) <> month(dateadd(d,-1,@Today)) then 1
					  else 0
					  end

Set @LastSnapshot = (select max([VersioneSnapshot]) from [dbo].[HistoryCRM])
--print (@LastSnapshot)
--print ( cast(year(@Today) as nvarchar(4)) + cast(month(@Today) as nvarchar(2)) )

IF(@FirstDayMonth = 1 and @LastSnapshot <> cast(year(@Today) as nvarchar(4)) + cast(month(@Today) as nvarchar(2))) --Se primo gg del mese e non esiste già lo snapshot --> lo creo
	BEGIN

		Insert Into [dbo].[HistoryCRM](
			[DataSnapshot]
			,[VersioneSnapshot]
			,[CustomerSid]
			,[Loyalty]
			,[Spending]
			,[SpendingEcommerce]
			,[SpendingStore]
		)
		Select
			@Today
			,cast(year(@Today) as nvarchar(4)) + cast(month(@Today) as nvarchar(2))
			,[Customer_SID]
			,[LOYALTY__C]
			,[SPENDING_FRM__C]
			,[SPENDING_E_COMMERCE_FRM__C]
			,[SPENDING_STORE_FRM__C]
		from [cfg].[CRMCustomerAttributes]
		--from [cfg].[MasterSlave]
		where [Customer_SID] <> ''

	END

ELSE		--> Se non è il primo del mese oppure esiste già lo snapshot, lo aggiorno.				
	BEGIN

		-- Allineo lo Snapshot del mese corrente
		MERGE [GZD_Stg].[dbo].[HistoryCRM] as Target --tabella nello stage
		USING
			(
			Select
				@Today							as [DataSnapshot]
				,cast(year(@Today) as nvarchar(4)) + cast(month(@Today) as nvarchar(2)) as [VersioneSnapshot]
				,[Customer_SID]				as [CustomerSid]
				,[LOYALTY__C]					as [Loyalty]
				,[SPENDING_FRM__C]				as [Spending]
				,[SPENDING_E_COMMERCE_FRM__C]	as [SpendingEcommerce]
				,[SPENDING_STORE_FRM__C]		as [SpendingStore]
			--from [cfg].[MasterSlave]
			from [cfg].[CRMCustomerAttributes]
			where [Customer_SID] <> ''
			) as Source

			ON target.[VersioneSnapshot] = Source.[VersioneSnapshot]
			and target.[CustomerSid] = Source.[CustomerSid]
			
		WHEN MATCHED 
			AND target.[DataSnapshot]		<> source.[DataSnapshot]	
			or target.[Loyalty]				<> source.[Loyalty]
			or target.[Spending]			<> source.[Spending]
			or target.[SpendingEcommerce]	<> source.[SpendingEcommerce]
			or target.[SpendingStore]		<> source.[SpendingStore]
			THEN

		UPDATE SET
			target.[DataSnapshot]		= source.[DataSnapshot]	
			,target.[VersioneSnapshot]	= source.[VersioneSnapshot]
			,target.[CustomerSid]		= source.[CustomerSid]
			,target.[Loyalty]			= source.[Loyalty]
			,target.[Spending]			= source.[Spending]
			,target.[SpendingEcommerce]	= source.[SpendingEcommerce]
			,target.[SpendingStore]		= source.[SpendingStore]

		WHEN NOT MATCHED BY TARGET THEN
		INSERT (
				[DataSnapshot]
				,[VersioneSnapshot]
				,[CustomerSid]
				,[Loyalty]
				,[Spending]
				,[SpendingEcommerce]
				,[SpendingStore]
			)
		VALUES (
			source.[DataSnapshot]
			,source.[VersioneSnapshot]
			,source.[CustomerSid]
			,source.[Loyalty]
			,source.[Spending]
			,source.[SpendingEcommerce]
			,source.[SpendingStore]
		);
	END
END

------------------------------------------------------------------------------------------------------------
-- PARAMETRI PROCEDURA DATI TO SQL

CREATE Procedure [dbo].[Bdg_DataToExcel] @Bu as nvarchar(255)
,@Region as nvarchar(255)
,@Agent as nvarchar(255)
as
SET NOCOUNT ON
SET ANSI_WARNINGS OFF

EXEC msdb.dbo.sp_start_job N'Bdg_ToSQL_Currency'

------------------------------------------------------------------------------------------------------------
-- Compressione Tabelle

ALTER TABLE nav.PriceConfigurationES REBUILD PARTITION = ALL 

WITH (DATA_COMPRESSION = ROW); 

ALTER TABLE dbo.FactsInvCrMStage REBUILD PARTITION = ALL 

WITH (DATA_COMPRESSION = ROW);  

------------------------------------------------------------------------------------------------------------
-- SP per creazione folder dei report schedulati da ssrs:
/*
[dbo].[435_byStore_Scheduling] -> nella colonna Path contiene tutti i nomi delle directory da creare
esempio:
\\xxx.com\dfs\SH_Reports\PROD\102-654
\\xxx.com\dfs\SH_Reports\PROD\102-654
\\xxx.com\dfs\SH_Reports\PROD\102-760
\\xxx.com\dfs\SH_Reports\PROD\102-760
*/


CREATE procedure [dbo].[spGeneraFolder_435_byStore] 
as
begin
declare @path nvarchar(255)
declare cur cursor fast_forward
	for SELECT distinct 
		[PATH]   
	FROM [dbo].[435_byStore_Scheduling]
open cur
	 fetch next from cur into @path
	 while @@fetch_status = 0
	 begin
		EXEC master.dbo.xp_create_subdir @path
	 fetch next from cur into @path
	 end
close cur
deallocate cur
end

------------------------------------------------------------------------------------------------------------
-- 
Use SSISDB

Go

WITH 
ctePRE AS  (SELECT  * FROM catalog.event_messages em WHERE em.event_name IN ('OnPreExecute')), 
ctePOST AS (SELECT  * FROM catalog.event_messages em WHERE em.event_name IN ('OnPostExecute'))

SELECT  
b.operation_id
, b.package_name
, b.package_path
, b.message_source_name
, b.message_time as pre_message_time
, e.message_time as post_message_time
, DATEDIFF(SECOND, b.message_time, COALESCE (e.message_time, SYSDATETIMEOFFSET())) as elapsed_time_sec

INTO #t
FROM ctePRE b 
LEFT OUTER JOIN ctePOST e 
	ON b.operation_id = e.operation_id 
	AND b.package_name = e.package_name
	AND b.message_source_id = e.message_source_id

INNER JOIN [catalog].executions e2 
	ON b.operation_id = e2.execution_id

WHERE b.package_path <> '\Package' 
  AND cast(b.message_time AS date) = '2019-08-09' /* to get execution of a specific day. This line can be commented to get existing data till date */



SELECT
pkg.package_name
,pkg.package_path
--SUBSTRING(pkg.package_name, 1, LEN(pkg.package_name) - 5) PackageName
, pkg.message_source_name
, pkg.pre_message_time
, pkg.post_message_time
, pkg.elapsed_time_sec
FROM #t pkg
where package_name in( 
'1.2.1 - Carica_dati_Informix.dtsx'
--'1 - Carica_dati.dtsx'
)

ORDER BY elapsed_time_sec DESC

select 
a.operation_id 
,package_name
,message_source_name
,MIN( message_time  ) Task_Start
,MAX( message_time  ) Task_Finish
,DATEDIFF(MINUTE, MIN(message_time) , MAX(message_time)  ) [time_Take_Minutes]
,DATEDIFF(SECOND, MIN(message_time) , MAX(message_time)  ) [time_Take_Seconds]
from SSISDB.[catalog].[event_messages] a
inner JOIN SSISDB.[catalog].[operations] b
ON b.operation_id = a.operation_id

where 
	a.operation_id = '202140'
	and a.event_name in (
		'OnPreExecute',
		'OnPostExecute'
		)

 GROUP BY a.operation_id ,  package_name ,  message_source_name 
 ORDER BY 7 DESC


 select 
 RIGHT([Message],27)
 ,*
 ,DATEDIFF(MINUTE, start_time , end_time  ) [time_Take_Minutes]
  from SSISDB.[catalog].[event_messages] a
  inner JOIN SSISDB.[catalog].[operations] b
ON b.operation_id = a.operation_id
   where a.operation_id = '202140'
   and a.[message] like '%Elapsed time%'

   order by 1 desc


------------------------------------------------------------------------------------------------------------
-- 

		select distinct (OBJECT_NAME (id))
		from sys.syscomments
		where text like '%DIM_CALENDAR%'
		
------------------------------------------------------------------------------------------------------------
--  LOG
CREATE PROCEDURE [log].[p_Log_JobStepStart] (@JobId uniqueidentifier, @JobNumber smallint, @JobStepNumber smallint, @JobStepDescription varchar(255), @ProcedureName varchar(255) = NULL, @InputParameters XML, @JobStepId uniqueidentifier OUTPUT)
AS
BEGIN

	SET @JobStepId = newid()

	INSERT INTO [ETL].[Log].[Log] (JobNumber, JobId, JobStepNumber, JobStepId, JobName, JobDescription, JobStepDescription, ProcedureName, StartTime, InputParams)
	SELECT
		  @JobNumber
		, @JobId
		, @JobStepNumber
		, @JobStepId
		, J.JobName
		, J.JobDescription
		, @JobStepDescription
		, @ProcedureName
		, getdate()
		, @InputParameters
	FROM [Log].[Job] J
	WHERE J.JobNumber = @JobNumber
	OR (J.JobNumber = 0 AND @JobNumber IS NULL)
	END

CREATE PROCEDURE [log].[p_Log_JobStepSuccess] (@JobStepId uniqueidentifier)
AS
BEGIN

	UPDATE [ETL].[Log].[Log]
		SET EndTime = getdate(),
			Duration = abs(datediff(mi, StartTime, getdate())),
			Status = 'SUCCESS',
			ErrorNumber = 0,
			ErrorSeverity = 0,
			ErrorState = 0
	WHERE JobStepId = @JobStepId

END

CREATE PROCEDURE [log].[p_Log_JobStepFailure] (@JobStepId uniqueidentifier)
AS
BEGIN

	DECLARE @ErrorNumber int,
			@ErrorSeverity smallint,
			@ErrorState smallint,
			@ErrorProcedure varchar(255),
			@ErrorLine smallint,
			@ErrorMessage varchar(max)
			
    SELECT 
          @ErrorNumber = ERROR_NUMBER()
        , @ErrorSeverity = ERROR_SEVERITY()
        , @ErrorState = ERROR_STATE()
        , @ErrorProcedure = ERROR_PROCEDURE()
        , @ErrorLine = ERROR_LINE()
        , @ErrorMessage = ERROR_MESSAGE()

	UPDATE [ETL].[Log].[Log]
		SET EndTime = getdate(),
			Duration = abs(datediff(mi, StartTime, getdate())),
			Status = 'FAILED',
			ErrorNumber = @ErrorNumber,
			ErrorSeverity = @ErrorSeverity,
			ErrorState = @ErrorState,
			ErrorProcedure = @ErrorProcedure,
			ErrorLine = @ErrorLine,
			ErrorMessage = @ErrorMessage
	WHERE JobStepId = @JobStepId


	/* ******************************************************************************
	SEND MAIL
	****************************************************************************** */

	
--DICHIARAZIONE VARIABILI
	DECLARE	@JobId uniqueidentifier,
			@JobName varchar(100),
			@JobDescription varchar(100),
			@JobStepDescription varchar(100),
			@ProcedureName varchar(100),
			@StartTime datetime,
			@Duration int,
			@MailSubject nvarchar(255),
			@MailBody nvarchar(max)

--ASSEGNAZIONE VARIABILI
	SELECT
		  @JobId = JobId
		, @JobName = JobName
		, @JobDescription = JobDescription
		, @JobStepDescription = JobStepDescription
		, @ProcedureName = ProcedureName 
		, @StartTime = StartTime
		, @Duration = Duration
	FROM [ETL].[Log].[Log]
	WHERE JobStepId = @JobStepId

	SET @MailSubject =  'Consolidamento DWH - Errore nello step "' + ISNULL('"' +  @JobStepDescription + '" ', 'N.A.') + '" della procedura "' + @ProcedureName + '"'

	SET @MailBody = CONCAT(
		  'E'' fallito lo step ' + isnull('"' + @JobStepDescription + '" ', '') 
		, 'della procedura "' + @ProcedureName 
		, '".'
		, CHAR(13)
		, 'Lo step fallito è iniziato alle ' 
		, CAST(@StartTime as time(0)) 
		, ' del ' 
		, CONVERT(varchar(10), @StartTime, 105) 
		, '. La durata complessiva dello step fallito è di ' 
		, CAST(@Duration / 60 as varchar(4)) 
		, ' minuti.'
		, CHAR(13)
		, CHAR(13)
		, 'Dettagli errore'
		, CHAR(13)
		, '  - Error Number: ' 
		, ISNULL(CAST(@ErrorNumber as varchar(10)), 50000) 
		, CHAR(13)
		, '  - Error Message: ' 
		, ISNULL(CAST(LEFT(@ErrorMessage, 300) as varchar(300)), 'Not Available')
		, CHAR(13)
		, CHAR(13)
		)

--INVIO MAIL TRAMITE CLR		
	EXEC [dbo].[xp_SendMail]
			@smtpServer					= 'smtprelay.percassi.com',
			@smtpUser					= '', 
			@smtpPasswd					= '', 
			@recipients					= 'PM.IT.Middleware.Team@percassi.it,marco.amicabile@porini.it', 
			@recipientsCC				= '', 
			@recipientsBCC				= '', 
			@subject					= @MailSubject,
			@FROM						= 'etl@percassi.it', 
			@body						= @MailBody,
			@Attachment					= '', 
			@AttachmentFileExtension	= ''




	/* OLD versione Danilo
	DECLARE	@JobId uniqueidentifier,
			@JobName varchar(100),
			@JobDescription varchar(100),
			@JobStepDescription varchar(100),
			@ProcedureName varchar(100),
			@StartTime datetime,
			@Duration int,
			@MailSubject nvarchar(255),
			@MailBody nvarchar(max),
			@MailStmt nvarchar(max),
			@EMailProfile nvarchar(255),
			@ToList nvarchar(max),
			@CCList nvarchar(max),
			@BCCList nvarchar(max)

	SELECT
		  @JobId = JobId
		, @JobName = JobName
		, @JobDescription = JobDescription
		, @JobStepDescription = JobStepDescription
		, @ProcedureName = ProcedureName 
		, @StartTime = StartTime
		, @Duration = Duration
	FROM [ETL].[Log].[Log]
	WHERE JobStepId = @JobStepId

	SET @MailSubject =  'Consolidamento DWH - Errore nello step "' + ISNULL('"' +  @JobStepDescription + '" ', 'N.A.') + '" della procedura "' + @ProcedureName + '"'

	SET @MailBody = CONCAT(
		  'E'' fallito lo step ' + isnull('"' + @JobStepDescription + '" ', '') 
		, 'della procedura "' + @ProcedureName 
		, '".'
		, CHAR(13)
		, 'Lo step fallito è iniziato alle ' 
		, CAST(@StartTime as time(0)) 
		, ' del ' 
		, CONVERT(varchar(10), @StartTime, 105) 
		, '. La durata complessiva dello step fallito è di ' 
		, CAST(@Duration / 60 as varchar(4)) 
		, ' minuti.'
		, CHAR(13)
		, CHAR(13)
		, 'Dettagli errore'
		, CHAR(13)
		, '  - Error Number: ' 
		, ISNULL(CAST(@ErrorNumber as varchar(10)), 50000) 
		, CHAR(13)
		, '  - Error Message: ' 
		, ISNULL(CAST(LEFT(@ErrorMessage, 300) as varchar(300)), 'Not Available')
		, CHAR(13)
		, CHAR(13)
		, 'In allegato il file di Log relativo all''operazione fallita.'
		)

	SET @MailStmt = 
	'SET NOCOUNT ON
	GO
	SELECT * FROM [dbo].[fn_Get_JobStepLog](''' + CAST(@JobStepId as varchar(36)) + ''')'
	
	SELECT TOP 1 @EMailProfile = ParameterValue FROM [ETL].[Log].Parameter
	WHERE ParameterType = 'EMAIL_PROFILE'

	SELECT @ToList = STRING_AGG(ParameterValue, ';') FROM [ETL].[Log].Parameter
	WHERE ParameterType = 'EMAIL_TO'
	
	SELECT @CCList = STRING_AGG(ParameterValue, ';') FROM [ETL].[Log].Parameter
	WHERE ParameterType = 'EMAIL_CC'
	
	SELECT @BCCList = STRING_AGG(ParameterValue, ';') FROM [ETL].[Log].Parameter
	WHERE ParameterType = 'EMAIL_BCC'

	EXEC msdb..sp_send_dbmail
		  @profile_name = @EMailProfile
		, @recipients = @ToList
		, @copy_recipients = @CCList
		, @blind_copy_recipients = @BCCList
		, @subject = @MailSubject
		, @body = @MailBody
		, @body_format = 'TEXT'
		, @importance = 'high'
--		, @sensitivity = 'sensitivity'
--		, @file_attachments = 'attachment [ ; ...n ]'
		, @query = @MailStmt
		, @execute_query_database = 'DWH'
		, @attach_query_result_as_file = 1
		, @query_attachment_filename = 'LOG.txt'
		, @query_result_no_padding = 1
		, @query_result_header = 1
		, @query_result_separator = ';'
		, @exclude_query_output = 0
		*/
END
	
----------------------------------------------------------------------------------------------------------------------------
--- check se due tabelle sono identiche

SELECT * FROM tab1
UNION 
SELECT * FROM tab2
EXCEPT 
SELECT * FROM tab1
INTERSECT
SELECT * FROM tab2;


SELECT *
FROM
(SELECT * FROM tab1
UNION ALL  
SELECT * FROM tab2) data
GROUP BY col1,col2,...
HAVING count(*)!=2
	
	
	
	
	
